
# Example using the stock market as a way to make predictions
# This is an initial attempt at making and using ML to predict
# stocks. This could be further refined using different features
# or a more robust data set.

import quandl
import math
import time
import numpy as np
import pandas as pd
from sklearn import preprocessing, cross_validation, svm
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from matplotlib import style
import datetime

style.use('ggplot')

# This is a creation of features, data set, to use to find the
# predicted stock price.

df = quandl.get("WIKI/AAPL")
df = df[['Adj. Open',  'Adj. High',  'Adj. Low',  'Adj. Close', 'Adj. Volume']]
df['HL_PCT'] = (df['Adj. High'] - df['Adj. Low']) / df['Adj. Close'] * 100.0
df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) / df['Adj. Open'] * 100.0

df = df[['Adj. Close', 'HL_PCT', 'PCT_change', 'Adj. Volume']]

# Creation of the label, or prediction
forecast_col = 'Adj. Close'
df.fillna(value=-99999, inplace=True)

# Regression algorithm
forecast_out = int(math.ceil(0.01 * len(df)))
df['label'] = df[forecast_col].shift(-forecast_out)


# Scaling along other values.
# Scaling X before passing through the classifier
# along with other values to give accurate prediction.
X = np.array(df.drop(['label'], 1))
X = preprocessing.scale(X)
X_lately = X[-forecast_out:]
X = X[:-forecast_out]

df.dropna(inplace=True)

y = np.array(df['label'])

# Training the model
# Cross validation is an essential way to train the model.
# Cross validation is similar to taking a practice test
# prior to taking the real test. It also will help the model
# generalize on new data. This is critical to prevent over
# or underfitting.

X_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=0.2)

# Changing to svm.SVR() algo yields a much worse accuracy
# clf = LinearRegression() is just the algo that we use that
# is substantionally better than different ones
# Also keep in mind that in the LinearRegression() you can
# multi thread the number of jobs using n_jobs. This can
# make the algo faster or slower depending.

clf = LinearRegression(n_jobs=-1)
clf.fit(X_train, y_train)
confidence = clf.score(X_test, y_test)

forecast_set = clf.predict(X_lately)
df['Forecast'] = np.nan

last_date = df.iloc[-1].name
last_unix = time.mktime(last_date.timetuple())
one_day = 86400
next_unix = last_unix + one_day

for i in forecast_set:
    next_date = datetime.datetime.fromtimestamp(next_unix)
    next_unix += 86400
    df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]

# Making the points on a graph to have a visual representation
# of the predictions.

df['Adj. Close'].plot()
df['Forecast'].plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

